--Check if this is already run on SI
--ALTER TABLE public.acuerdoprivacidad ADD firmacoordiador varchar NULL;



-- public.encuestasatisfaccion definition

-- Drop table

-- DROP TABLE public.encuestasatisfaccion;

CREATE TABLE public.encuestasatisfaccion (
	id serial NOT NULL,
	creado timestamp NULL,
	actualizado timestamp NULL,
	id_derivacion int4 NOT NULL,
	id_terapeuta int4 NOT NULL,
	tratoproblema varchar NULL,
	tratamientoayuda varchar NULL,
	estadoemocionalinicio varchar NULL,
	estadoemocionalfinal varchar NULL,
	puntualidadterapeuta varchar NULL,
	cumplimientoterapeuta varchar NULL,
	resultado varchar NULL,
	CONSTRAINT encuestasatisfaccion_pk PRIMARY KEY (id)
);


-- Crear campo date time con la concatenación de fecha y hora de la tabla agenda
select to_timestamp(concat_ws(' ',a.fecha, a.hora), 'YYYY-MM-DD HH24:MI AM' ), a.fecha, a.hora, a.fecha_hora from agenda a;

alter table agenda add column fecha_hora timestamp;

update agenda a1 set fecha_hora = to_timestamp(concat_ws(' ',a1.fecha, a1.hora), 'YYYY-MM-DD HH24:MI AM' ) from agenda a2 where a2.id_cita = a1.id_cita;

-- AÑADIR CAMPO DE DESCRICION A LOS ROLES
alter table rol add column descripcion varchar;
update rol set descripcion = 'ADMINISTRADOR' where nombre = 'ADMIN';
update rol set descripcion = 'TERAPEUTA -> USUARIO NORMAL' where nombre = 'USER';

-- añadir nuevo ROLES
INSERT INTO public.rol
(nombre, descripcion)
VALUES('SUBADMIN', 'AUXILIAR CLINICO');

INSERT INTO public.rol
(nombre, descripcion)
VALUES('ADMINISTRATIVE', 'GESTOR DE SERVICIOS');


-- public.permiso definition

-- Drop table

-- DROP TABLE public.permiso;

CREATE TABLE public.permiso (
	id serial NOT NULL,
	valor varchar NULL,
	roles varchar NULL,
	tipo varchar NULL,
	descripcion varchar NULL,
	CONSTRAINT permiso_pk PRIMARY KEY (id)
);




-- INSERT datos a permiso
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede editar o agregar un expediente.','canEditRecord','ADMIN:SUBADMIN:','action');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede cargar cargar la foto de perfil del paciente','canUploadRecordProfilePhoto','ADMIN:SUBADMIN:ADMINISTRATIVE:','action');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver el tab de "Exploración clinica/ sintomatologica referida por el paciente"','canViewClinicExplorationAccordion','ADMIN:SUBADMIN:USER:','action');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver el tab de "Descripción impresionista del paciente / habitus exterior"','canViewPersonDescriptionHabitusAccordion','ADMIN:SUBADMIN:USER:','action');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede firmar el aviso de privacidad','canSignPrivacyAgreement','ADMIN:SUBADMIN:ADMINISTRATIVE:','action');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver las encuestas de satisifacción que se llenan para alta definitiva,  y baja','canViewSatisfactionSurveys','ADMIN:SUBADMIN:ADMINISTRATIVE:','action');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede crear la encuesta de satisfacción','canAddSatisfactionSurvey','ADMIN:SUBADMIN:ADMINISTRATIVE:','action');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede agregar una derivación','canAddDerivation','ADMIN:SUBADMIN:ADMINISTRATIVE:','action');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede cargar archivos a un expediente','canAddFiles','ADMIN:SUBADMIN:USER:','action');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede eliminar pacientes que no tengan un expediente','canDeletePerson','ADMIN:SUBADMIN:ADMINISTRATIVE:','action');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede agrgar resultados pruebas psicometricas','canAddTest','ADMIN:SUBADMIN:USER:','action');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver el modulo de pacientes','canViewPersonsModule','ADMIN:SUBADMIN:ADMINISTRATIVE:','module');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver el modulo de consultorio','canViewConsultoryModule','ADMIN:SUBADMIN:USER:','module');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver el modulo de terapeutas','canViewUsersModule','ADMIN:','module');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver el modulo de pruebas psicometricas','canViewTestsModule','ADMIN:SUBADMIN:','module');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver el modulo de reportes','canViewReportsModule','ADMIN:','module');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver el modulo de agenda','canViewAgendaModule','ADMIN:SUBADMIN:ADMINISTRATIVE:','module');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver el modulo de tickets','canViewTicketsModule','ADMIN:SUBADMIN:ADMINISTRATIVE:','module');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver el modulo de logs','canViewLogsModule','ADMIN:','');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver el tab de expediente','canViewRecordTab','ADMIN:SUBADMIN:ADMINISTRATIVE:USER:','record-tab');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver el tab de derivaciones, (Solo valida accesso a la lista, no al contenida, el contenido esta validandose de la misma manera que el permiso de canViewReportSessionContent)','canViewDerivationsTab','ADMIN:SUBADMIN:ADMINISTRATIVE:USER:','record-tab');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver el tab de reportes de sesión, (Solo valida accesso a la lista, no al contenido, el contenido esta validandose de la misma manera que el permiso de "canViewReportSessionContent" )','canViewSessionReportTab','ADMIN:SUBADMIN:ADMINISTRATIVE:USER:','record-tab');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver el tab de urgencias, (Solo valida accesso a la lista, no al contenido, el contenido esta validandose de la misma manera que el permiso de "canViewReportSessionContent" )','canViewUrgenciesTab','ADMIN:SUBADMIN:USER:','record-tab');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver la lista the archivos adjuntos','canViewAttachedFilesTab','ADMIN:SUBADMIN:USER:','record-tab');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver la lista de pruebas psicometricas aplciadas','canViewTestsTab','ADMIN:SUBADMIN:USER:','record-tab');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver la agenda del paciente','canViewAgendaTab','ADMIN:SUBADMIN:ADMINISTRATIVE:USER:','record-tab');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede ver el archivo de privacidad','canViewPrivacyAgreementTab','ADMIN:SUBADMIN:USER:','record-tab');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede añadir evento/cita a la agenda','canAddAgendaEvent','ADMIN:SUBADMIN:ADMINISTRATIVE:','agenda');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede utilzar los filtros de agenda','canFilterOnAgenda','ADMIN:SUBADMIN:ADMINISTRATIVE:','agenda');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede editar vento en la agenda','canEditAgendaEvent','ADMIN:SUBADMIN:ADMINISTRATIVE:','agenda');
INSERT INTO public.permiso (descripcion, "key", roles, tipo) VALUES('Puede borrar evento en la agenda','canDeleteAgendaEvent','ADMIN:SUBADMIN:ADMINISTRATIVE:','agenda');

-- Alter agenda table
ALTER TABLE public.agenda ADD creado timestamp NULL;
ALTER TABLE public.agenda ADD actualizado timestamp NULL;
ALTER TABLE public.agenda ADD fecha_final timestamp NULL;
ALTER TABLE public.agenda ADD asistio bool NULL;
ALTER TABLE public.agenda ADD duracion varchar NULL;
ALTER TABLE public.agenda ADD "version" varchar NULL;

-- Avoid nulls on autocomplete
update agenda set version = '1';

-- public.evento definition

-- Drop table

-- DROP TABLE public.evento;

CREATE TABLE public.evento (
	id serial NOT NULL,
	notas varchar NULL,
	creado timestamp NULL,
	actualizado timestamp NULL,
	id_terapeuta serial NOT NULL,
	fecha_incial timestamp NULL,
	fecha_final timestamp NULL,
	duracion varchar NULL,
	fondo bool NOT NULL DEFAULT false,
	CONSTRAINT evento_pk PRIMARY KEY (id)
);


-- public.evento foreign keys

ALTER TABLE public.evento ADD CONSTRAINT evento_fk FOREIGN KEY (id_terapeuta) REFERENCES terapeuta(id_terapeuta);
